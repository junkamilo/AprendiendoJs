// üîπ Solicitamos abrir la base de datos
const BD = indexedDB.open("InventarioNombre", 2);

// üîπ Si la BD no existe, se crea
BD.addEventListener("upgradeneeded", () => {
  const db = BD.result;
  db.createObjectStore("nombres", { autoIncrement: true });
  console.log("Base de datos creada correctamente ‚úÖ");
});

// üîπ Cuando la BD se abre correctamente
BD.addEventListener("success", () => {
  console.log("Todo sali√≥ correctamente con la base de datos ‚úÖ");
  mostrarMenu(); // ‚¨ÖÔ∏è Iniciamos el men√∫ principal
});

// üîπ Si hubo error al abrir la BD
BD.addEventListener("error", () => {
  console.log("Hubo un error con la base de datos ‚ùå");
});

// ===================================================
// üîπ FUNCIONES CRUD
// ===================================================

// Agregar objeto
const addObjetos = (objeto) => {
  const db = BD.result;
  const transation = db.transaction("nombres", "readwrite");
  const objEstore = transation.objectStore("nombres");

  const request = objEstore.add(objeto);

  request.onsuccess = () => console.log(`‚úÖ Objeto agregado:`, objeto);
  request.onerror = (e) =>
    console.error("‚ö†Ô∏è Error al agregar el objeto:", e.target.error);

  transation.addEventListener("complete", () =>
    console.log("‚úÖ Transacci√≥n completada al agregar.")
  );
};

// Leer objetos
const readObjetos = () => {
  const db = BD.result;
  const transation = db.transaction("nombres", "readonly");
  const objEstore = transation.objectStore("nombres");
  const cursor = objEstore.openCursor();

  console.log("üìã Lista de objetos registrados:");

  cursor.addEventListener("success", () => {
    if (cursor.result) {
      console.log(`üî∏ [ID: ${cursor.result.key}]`, cursor.result.value);
      cursor.result.continue();
    } else console.log("‚úÖ Todos los datos fueron le√≠dos.");
  });
};

// Modificar objeto
const modificarObjetos = (key, objeto) => {
  const db = BD.result;
  const transation = db.transaction("nombres", "readwrite");
  const objEstore = transation.objectStore("nombres");
  objEstore.put(objeto, key);

  transation.addEventListener("complete", () => {
    console.log(`‚úèÔ∏è Objeto #${key} modificado correctamente.`);
  });
};

// Eliminar objeto
const eliminarObjetos = (key) => {
  const db = BD.result;
  const transation = db.transaction("nombres", "readwrite");
  const objEstore = transation.objectStore("nombres");
  objEstore.delete(key);

  transation.addEventListener("complete", () => {
    console.log(`üóëÔ∏è Objeto #${key} eliminado correctamente.`);
  });
};

// ===================================================
// üîπ MEN√ö PRINCIPAL
// ===================================================
const mostrarMenu = () => {
  let opcion;

  do {
    opcion = prompt(
      `üì¶ MEN√ö DE INVENTARIO
1Ô∏è‚É£ Agregar nombre
2Ô∏è‚É£ Leer todos
3Ô∏è‚É£ Modificar nombre
4Ô∏è‚É£ Eliminar nombre
5Ô∏è‚É£ Salir
Seleccione una opci√≥n:`
    );

    if (opcion === null) {
      console.log("üü° Usuario cancel√≥ la operaci√≥n.");
      break;
    }

    opcion = opcion.trim();

    switch (opcion) {
      case "1":
        agregarDesdePrompt();
        break;
      case "2":
        readObjetos();
        break;
      case "3":
        editarDesdePrompt();
        break;
      case "4":
        eliminarDesdePrompt();
        break;
      case "5":
        console.log("üëã Saliendo del men√∫...");
        return;
      default:
        alert("‚ö†Ô∏è Opci√≥n no v√°lida. Intente de nuevo.");
    }
  } while (true);
};

// ===================================================
// üîπ FUNCIONES INTERACTIVAS
// ===================================================

// Agregar desde prompt
const agregarDesdePrompt = () => {
  let nombreInventario = prompt("Ingrese el nombre del inventario:");
  if (nombreInventario === null) return;

  nombreInventario = nombreInventario.trim();

  if (nombreInventario === "") {
    alert("‚ö†Ô∏è El nombre no puede estar vac√≠o.");
    return;
  }

  addObjetos({ nombre: nombreInventario });
};

// Editar desde prompt
const editarDesdePrompt = () => {
  let id = prompt("Ingrese el n√∫mero (ID) del objeto a editar:");
  if (id === null) return;
  id = id.trim();

  if (id === "" || isNaN(id)) {
    alert("‚ö†Ô∏è Debe ingresar un n√∫mero v√°lido.");
    return;
  }

  let nuevoNombre = prompt("Ingrese el nuevo nombre:");
  if (nuevoNombre === null) return;
  nuevoNombre = nuevoNombre.trim();

  if (nuevoNombre === "") {
    alert("‚ö†Ô∏è El nombre no puede estar vac√≠o.");
    return;
  }

  modificarObjetos(Number(id), { nombre: nuevoNombre });
};

// Eliminar desde prompt
const eliminarDesdePrompt = () => {
  let id = prompt("Ingrese el n√∫mero (ID) del objeto a eliminar:");
  if (id === null) return;
  id = id.trim();

  if (id === "" || isNaN(id)) {
    alert("‚ö†Ô∏è Debe ingresar un n√∫mero v√°lido.");
    return;
  }

  eliminarObjetos(Number(id));
};
